{"version":3,"sources":["Components/Scoreboard/Scoreboard.js","Components/Card/Card.js","Components/App/App.js","index.js"],"names":["Scoreboard","props","className","score","best","hasWon","Card","onClick","draggable","src","img","alt","getRandomNumber","min","max","Math","ceil","floor","random","shuffleArray","arr","i","length","firstIndex","secondIndex","temp","getImages","n","a","images","fetch","response","json","newImage","indexOf","image","push","console","log","App","useState","setScore","setBest","setHasWon","hasRestarted","setHasRestarted","Array","fill","setCardImages","currentCards","setCurrentCards","loading","setLoading","promises","forEach","el","newPromise","Promise","resolve","reject","Image","onload","onerror","all","Error","shuffleUntilOneUnclicked","cards","newCurrent","copy","JSON","parse","stringify","atLeastOneUnclickedCard","slice","filter","card","clicked","resetClickStatus","prev","map","onCardClick","e","id","correspondingCardIndex","findIndex","useEffect","then","newImages","arrayOfCardObjects","uuidv4","cacheImages","savedHighscore","localStorage","highscore","Fragment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62b6a708.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Scoreboard.css';\r\n\r\nfunction Scoreboard(props) {\r\n  return (\r\n    <div className=\"Scoreboard\">\r\n      <div className=\"Score\">Score: {props.score}</div>\r\n      <div className=\"Best\">Best: {props.best}</div>\r\n      {props.hasWon ? <h1>You won!</h1> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scoreboard;\r\n","import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"Card\" onClick={props.onClick}>\r\n      <img draggable=\"false\" className=\"Card__image\" src={props.img} alt=\"\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from 'react';\n\nimport './App.css';\n\nimport Scoreboard from '../Scoreboard/Scoreboard.js';\nimport Card from '../Card/Card.js';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nlet getRandomNumber = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nlet shuffleArray = (arr) => {\n  for (let i = 0; i < arr.length; ++i) {\n    let firstIndex, secondIndex;\n    let temp;\n\n    firstIndex = getRandomNumber(0, arr.length - 1);\n    secondIndex = getRandomNumber(0, arr.length - 1);\n\n    temp = arr[firstIndex];\n    arr[firstIndex] = arr[secondIndex];\n    arr[secondIndex] = temp;\n  }\n\n  return arr;\n};\n\nlet getImages = async (n) => {\n  let images = [];\n\n  try {\n    while (images.length < n) {\n      let response = await fetch('https://randomfox.ca/floof/');\n      let newImage = await response.json();\n\n      if (images.indexOf(newImage.image) === -1) {\n        images.push(newImage.image);\n      }\n    }\n  } catch (error) {\n    console.log(error);\n  }\n\n  return images;\n};\n\nfunction App() {\n  const N_OF_CARDS = 10;\n  const N_OF_CARDS_SHOWN = 3;\n  let [score, setScore] = useState(0);\n  let [best, setBest] = useState(0);\n  let [hasWon, setHasWon] = useState(false);\n  let [hasRestarted, setHasRestarted] = useState(true);\n\n  // eslint-disable-next-line no-unused-vars\n  let [cardImages, setCardImages] = useState(Array(N_OF_CARDS).fill({}));\n  let [currentCards, setCurrentCards] = useState(\n    Array(N_OF_CARDS_SHOWN).fill({})\n  );\n  let [loading, setLoading] = useState(true);\n\n  async function cacheImages(arr) {\n    let promises = [];\n    arr.forEach((el) => {\n      let newPromise = new Promise((resolve, reject) => {\n        let img = new Image();\n        img.src = el.src;\n        img.onload = resolve(true);\n        img.onerror = reject('error loading image');\n      });\n      promises.push(newPromise);\n    });\n\n    try {\n      await Promise.all(promises);\n    } catch (error) {\n      throw new Error(error);\n    }\n\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    if (!hasRestarted) return;\n    setLoading(true);\n\n    getImages(N_OF_CARDS).then((newImages) => {\n      let arrayOfCardObjects = newImages.map((image) => {\n        return {\n          id: uuidv4(),\n          src: image,\n          clicked: false,\n        };\n      });\n      cacheImages(arrayOfCardObjects);\n      setCardImages(arrayOfCardObjects);\n      shuffleUntilOneUnclicked();\n    });\n    setHasRestarted(false);\n  }, [hasRestarted]);\n\n  useEffect(() => {\n    let savedHighscore = localStorage.highscore;\n    if (savedHighscore) {\n      setBest(savedHighscore);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.highscore = best;\n  }, [best]);\n\n  function shuffleUntilOneUnclicked() {\n    setCardImages((cards) => {\n      let copy = JSON.parse(JSON.stringify(cards));\n\n      let newCurrent;\n      let atLeastOneUnclickedCard = false;\n      while (!atLeastOneUnclickedCard) {\n        shuffleArray(copy);\n        newCurrent = copy.slice(0, 3);\n\n        if (newCurrent.filter((card) => !card.clicked))\n          atLeastOneUnclickedCard = true;\n      }\n\n      setCurrentCards(newCurrent);\n\n      return cards;\n    });\n  }\n\n  function resetClickStatus() {\n    setCardImages((prev) => {\n      return prev.map((el) => {\n        let copy = el;\n        copy.clicked = false;\n\n        return copy;\n      });\n    });\n  }\n\n  function updateScore() {\n    setScore((score) => {\n      setBest((best) => {\n        if (score + 1 > best) return score + 1;\n        return best;\n      });\n      if (score + 1 === N_OF_CARDS) setHasWon(true);\n      return score + 1;\n    });\n  }\n\n  function clearScore() {\n    setScore(0);\n    setBest(0);\n  }\n\n  function gameOver() {\n    setScore(0);\n    resetClickStatus();\n  }\n\n  function onCardClick(e, id) {\n    setCardImages((prev) => {\n      let correspondingCardIndex = prev.findIndex((el) => el.id === id);\n\n      if (prev[correspondingCardIndex].clicked) {\n        gameOver();\n        return prev;\n      }\n\n      updateScore();\n\n      let copy = JSON.parse(JSON.stringify(prev));\n      copy[correspondingCardIndex].clicked = true;\n\n      return copy;\n    });\n\n    shuffleUntilOneUnclicked();\n  }\n\n  function displayCards() {\n    return (\n      <React.Fragment>\n        {currentCards.map((card) => {\n          return (\n            <Card\n              key={card.id}\n              img={card.src}\n              onClick={\n                !hasWon\n                  ? (e) => {\n                      onCardClick(e, card.id);\n                    }\n                  : null\n              }\n            />\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <Scoreboard score={score} best={best} hasWon={hasWon} />\n      <div className=\"Game\">\n        {loading ? <span className=\"loading\">Loading...</span> : displayCards()}\n      </div>\n      <div>\n        <button\n          className=\"Button--reset\"\n          onClick={() => {\n            clearScore();\n            resetClickStatus();\n          }}\n        >\n          Clear score\n        </button>\n        <button\n          className=\"Button--reset\"\n          onClick={() => {\n            setHasRestarted(true);\n            setScore(0);\n          }}\n        >\n          Restart\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}